
[ ] put actual names in the committee listing
[ ] Listing numbers in bytecodes are messed up, why?
    because of the lstset applies to all following jscode listings
[ ] propagation rules summary: mention that the design of JSC as a bytecode interpreter greatly assisted implementation.
[ ] add motivation for implementing at the bytecode level
[ ] add bottom to label lattice, search text for bottom and replace with $\bot$

* thesis
  [ ] :spelling: make sure that 'web browser' 'web page' 'web server' are all consistent
  [ ] :spelling: make sure that 'runtime' and 'compile time' are all consistent
  [ ] :citations:
    [ ] Caisson: A Hardware Description Language for Secure Information Flow
    [ ] Glift 2009
    [ ] Tracking Information Flow at the Gate-Level for Secure Architectures
    [ ] Execution Leases: A Hardware-Supported Mechanism for Enforcing Strong Non-Interference 
    [ ] Aiken: Secure Information Flow as a Safety Problem

    [ ] An Architectural Approach to Preventing Code Injection Attacks
        is there a language transport format that would prevent code injection?
        a non-injectable object description language?
    [ ] Romer et. Structure Interp 1995

    [ ] Cox et al. A safety oriented platform for web applications
    [ ] Gazelle web browser, the multi-principal OS construction
    [ ] Grier Tong King, Secure web browsing with OP web browsers
    [ ] Askarov and Sabelfeld, Tight Enforcement of Information-Release Policies for Dynamic Languages
    [ ] Boniface Hicks, Dave KKKing, Patrick McDaniel, Michael Hicks. Trusted Declassification: High-level policy for a security-typed language
    [ ] Sabelfeld and Myers, A Model for Delimited Information Release
    [ ] Myers and Liskov. Complete, Safe Information Flow with Decentralized Labels
    [ ] Russo and Sabelfeld. Securing Timeout Instructions in Web Applications
    [ ] Su and Wasserman. The Essence of Command Injection Attacks in Web Applications
    [ ] Chugh, Meister, Jhala, Lerner. Staged Information Flow for JavaScript

* Motivation
    [x] say that js handles sensitive info
    [x] delineate injection
        [x] difficulties filtering
    [x] scare-monger prevalence as `buffer overflow'
        [x] give examples of xss
    [no] categorize xss
    [ ] introduce information flow security approach
    [ ] JavaScript Security Semantics
        [ ] pound-include problem
        [ ] sandbox + same origin policy
   [ ] explain why more difficult in dyn lang (vs static, Java)
** The Threat of Code Injection
** Difficulties of Filtering User Input
*** HTML Identification
*** Script Identification
** The Last Line of Defence
*** Preventing Malicious Action

* Related Work
[ ] Information flow security for a core of javascript
    http://www.cse.chalmers.se/\~utter/jsflow/jsflow-full.pdf
    gives a full formal semantics of labeling for non-interference
    was proved sound using coq
[ ] Sabelfeld, Li, Russo ``Implicit flows in malicious and nonmalicious code''
[ ] Russo and Sabelfeld "impossiblity of sound, purely dynamic, flow sensitive monitoring" [Dynamic vs. static flow-sensitive security analysis, Security Foundations Symposium'10]
[ ] Le Guernic's PhD thesis for survey on dynamic information flow techniques: "Confidentiality Enforcement Using Dynamic Information Flow Analyses" Kansas State University, 2007


* Terminology
  [ ] make a section on classic problems: label creep
** Explicit Information Flow
** Implicit Information Flow

* System Design Considerations
  :dependency: first use of label creep in interned-objects, would be nice to intro issue before this
  :dependency: first use of label upgrading + propagation issues rules
  [ ] JIT only lets you win on the dispatch, not on the label overhead
  [ ] inherent difficulties/slowdowns: staged, sparse, stat/dyn analysis, jit
   -  impact on different parts
  [ ] have the plots that show gradual performance degradation as each part is added
  [x] design is browser-agnostic
      Why it's harder in dyn lang (JS) vs static (Java)
     -  vs rewriting?
    [ ] have to argue that, in the end, the VM is best approach
** Possible Implementations
*** Existing Type System
*** Fat Value Technique
*** Security Wrapper Technique
** Impacts on the Virtual Machine
*** Labeling Primitives
*** Interned Objects
*** Systemic Memory Impacts
** :absent: Implementation Experience
** Summary
*** Impacts on Implementation
*** Impacts on the Runtime System
*** Impacts on Security Semantics
** Related Implementations
** Chosen Implementation for FlowCore

* Label Propagation
  [ ] security type system is orthogonal to value types
  [x] design of the cf-stack
** Label Lattice
** Label Operations
** Control Flow Stack
*** Monotonicity of Control Flow Stack
** Label Creep

* New Security Bytecodes
  [ ] mention Security Stack Verifier (abstract interpreter)
  [ ] measure growth of instruction stream (use alexa, sign into gmail, fb)
** Why new instructions are necessary
** DUP_CFLABEL
** JOIN_CFLABEL
** POPJ_CFLABEL
** LABEL_OF

* JavaScript Feature Catalog
    - how to secure each language feature
    - what to do with arrays, or does this fit better in design considerations?
    : Can coalesce labels on arrays?, label bounds checking?
    - obj literals
    how they interact with obj poisoning attack
    - retrieval
    indexing syntax [] vs .
    prototype chain
    - functions:
      label within a function, on args of function, on function itself

* Example Attacks ??
    - maybe for each language feature?

* Policies
    matrx of trade-offs, issues
    outline chart
    real-world frequency of occurance
    - no-sensitive upgrade vs others
** Capabilities
   - topology of runtime reference graph
   - confinement: cooperative isolation
   - selective revocation: withdraw previously granted acces
   - *-property: one-way communication between clearance levels

* Conclusion

***************************************************
General Notes found on scratch paper when moving

JavaScript Security Problems
   Field Accesses (computed)
   Heterogenity (Should obj have fields of mixed labels?)
   var hoisting (Mark M's es5 talk)
      but static scoping isn't lexical scoping
      google-caja.googlecode.com/svn/trunk/doc/html/es5-talk/img45.html
   Scope-ing (if-else, for, while, with not considered separate scope)
   AutoCreation of vars (mis-spelling creates new global vars)
   lookps (call parent scope vs. prototype chain)

   Other Lambda + 1st class functions (will have label attached)
    if fn's == message to object, then it is capability but the label is permission
    1st class labels ...


             +----------+---------+-------------------+
             |  Confid  |  Integ  |  Access           |
     --------+----------+---------+-------------------+
      Local  |          |         | Defacement Denial |
     --------+----------+---------+-------------------+
 non-persist |          |         |                   |
   reflected |          |         |                   |
     --------+----------+---------+-------------------+
semi-persist |          |         |                   |
      cookie |          |         |                   |
     --------+----------+---------+-------------------+
     persist |          |         |                   |
     stored  |          |         |                   |
     --------+----------+---------+-------------------+

  Douglas Crockford Secure EcmaScript wiki.ecmascript.org/doku.php?id=ses:ses
  Attacks:
    tag body
    node splitting
    attribute value
    attribute splitting
    tag splitting

  IFlow:
    ActsFor = reflexive and transitive
              defines partial order (hierarchy) of principals
              role = restriction on user authority

:jitflow: review what operations the jitflow paper implements

* UnitTest coverage of FlowCore
** Basic
  - label a variable
  - gc doesn't collect labels
  - label join works
  - label subsumption
  - apply upgrades
**Control Flow
  - for loop: exit condition has label, assignment to variable acquires it
  - while loop: exit expression has label, ++ in body acquires it
  - if-then-else: taken assignments (if and else cases)
**Operators
  - binary math, + - * /
  - string concat,
  - pre and post inc and dec
  - unary minus and plus
  - comparisons: integer==, string==, integer!=, string !=, strict ===, strict !==, <, <=, >, >=
  - bitwise: shift left, shift right, right with 0 fill, and, or, xor, not

Formality:
  - Do I want to talk about the no-sensitive-upgrade rule, or non-interference security?
    if so, grep the jsflows for those terms

